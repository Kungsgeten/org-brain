#+TITLE:org-brain [[http://melpa.org/#/org-brain][file:http://melpa.org/packages/org-brain-badge.svg]]

=org-brain= implements a variant of [[https://en.wikipedia.org/wiki/Concept_map][concept mapping]] in Emacs, using [[http://orgmode.org/][org-mode]]. It
is heavily inspired by a piece of software called [[http://thebrain.com/][The Brain]], and you can view an
introduction to that program [[https://www.youtube.com/watch?v=GFqLUBKCFdA][here]]. They also provide [[https://blog.thebrain.com/][a blog]] with great ideas of
how you can think when organizing your Brain.

You can think of =org-brain= as a combination of a wiki and a mind map, where
each wiki page / mind-map node is an =org-mode= file which resides in your
=org-brain-path=, or a headline with an ID property in one of those files. These
are called /entries/. Entries can be linked together, and you can then
view the network of links as a mind map, using =M-x org-brain-visualize=.

#+BEGIN_EXAMPLE
  PINNED:  Index


                 +-Python              Game development-+-Game design
                 +-Programming books           |
     Programming-+-Emacs                       |
           |                                   |
           +-----------------+-----------------+
                             |
                             ▽
                      Game programming ←→ Computer games

  Game Maker  Unity

  --- Resources ---------------------------------

  • https://en.wikipedia.org/wiki/Game_programming
  • Passing Through Ghosts in Pac-Man
  • In-House Engine Development: Technical Tips

  --- Text --------------------------------------

  Game programming is the art of programming computer games...
#+END_EXAMPLE

When visualizing an entry, you will see the entry's relationship to other
entries. There are four different types of relationships in =org-brain=:

- Parents :: Entries above the visualized entry. If the visualized entry is a
             headline, then the parent headline in the =org-mode= file will be
             one of the parents. In the case of top level headlines, the file
             itself will be considered a parent. Additional parents can be added
             manually. In the example above, /Programming/ and /Game
             development/ are parents of the visualized /Game programming/
             entry.
- Children :: Entries below the visualized entry. This will by default be
              subheadings of the visualized entry (or level one headlines, if
              the visualized entry is a file). You can add other children,
              residing elsewhere, manually. In the example above, /Game Maker/
              and /Unity/ are the children of /Game programming/.
- Siblings :: These appear to the right of the parent entries. Siblings are the
              other children of the visualized entry's parents.
- Friends :: These appear to the right of the visualized entry. Friends provide
             a way of adding a hierarchy independent two-way relationship
             between two entries. Friends must be added manually. In the example
             above, /Computer games/ and /Game programming/ are friends.

[[https://blog.thebrain.com/thought-relationships/][Here's an article]] describing how you can use the different relationships (The
Brain's /jump thoughts/ are the equivalent of /friends/ in =org-brain=).

Apart from the visualized entry's relationships, =org-brain-visualize= also show
pinned entries, which are shown independently of the visualized entry; /Index/
is a pinned entry in the example above. =org-brain-visualize= also show a list
of the entry's resources (links and attachments), and the text in the entry. The
example above have three resources, and a short text. The resources and text is
gathered from =org-mode= automatically.

The relationship entries, pinned entries and resources are all links; they can
be pressed/clicked to visualize other entries, visit resources etc.

* Backwards compability breaking changes in 0.4

/This is only relevant if you've been using org-brain before version 0.4/

As of version 0.4 (June 2017) =org-brain= has been rewritten, in order to
increase performance and add more options. Because of this, older setups are
considered obsolete. Prior to 0.4 only files were considered entries, but now
also headlines with an =ID= property are included as entries. Prior to 0.4
=org-brain= was using the =brain:= link and =#+BRAIN_PINNED:= file keyword to
connect files, which was slow due to the need of searching all files for links.
In version 0.4 =org-brain= uses a combination of headline properties, file
keywords, =org-id=, and a data file (=org-brain-data-file=).

No data in old configurations should be lost, but you'll have to update the
connections between entries. This can be done by using =M-x
org-brain-create-relationships-from-links=, but please backup your =org-brain=
directory first.

It is still possible to add children to an entry by using the =brain:= link, but
only if the link is inserted with =org-insert-link= (bound to =C-c C-l= in
=org-mode= by default) or with =org-brain-insert-link=. Linking to specific
headlines in a file, via =brain:filename::*Headline= is *deprecated* and will no
longer work, instead you can convert the headline to an entry and link directly
to that.

* Setup and requirements

The easiest way is to get =org-brain= from MELPA. If you do not want to do that,
clone this git repository or download =org-brain.el= and add it to your
load-path. The example below is using [[https://github.com/jwiegley/use-package][use-package]] and assumer that you're using
MELPA, but you could use =(require 'org-brain)= or add a =:load-path= to
=use-package= instead.

#+BEGIN_SRC emacs-lisp
  (use-package org-brain :ensure t
    :init
    (setq org-brain-path "directory/path/where-i-want-org-brain")
    ;; For Evil users
    (eval-after-load 'evil
      (evil-set-initial-state 'org-brain-visualize-mode 'emacs))
    :config
    (setq org-id-track-globally t)
    (setq org-id-locations-file "~/.emacs.d/.org-id-locations")
    (setq org-brain-visualize-default-choices 'all))
#+END_SRC

1. =org-brain= requires Emacs 25 and org-mode 9. These need to be part of your
   Emacs.
2. Configure =org-brain-path= (defaults to =/brain= in your =org-directory=) to
   a directory where you want to put your =org-brain= files (which could be the
   location where you already keep your org files if you wish to transform your
   existing org files into =org-brain= files). You can set this with the example
   config presented above or through =M-x customize-group RET org-brain=.
3. If you're an [[https://github.com/emacs-evil/evil][evil]] user, you'll want to add =(evil-set-initial-state
   'org-brain-visualize-mode 'emacs)= to your =org-brain= configuration.
4. =org-brain= use =org-id= in order to speed things up. Because of this, the
   variable =org-id-track-globally= should be =t= (which it already is by
   default). You may want to modify =org-id-locations-file= too.
5. If you have a lot of entries, it might take some time to gather information
   about all entries when using =org-brain-visualize=. You could change the
   value of =org-brain-visualize-default-choices= (which is ='all= by default)
   to only include files, or even just files in the direct root of
   =org-brain-path=.
6. If you feel that =org-brain-visualize= is too cluttered, you may want to set
   =org-brain-show-resources= and/or =org-brain-show-text= to =nil=.

* Usage

If you find that =org-brain= is missing entries, or list entries which doesn't
exist, try using =M-x org-brain-update-id-locations=, which syncs the
=org-brain= entries with the =org-id= caching system.

The primary usage of =org-brain= is through =M-x org-brain-visualize= (which you
might want to bind to a key). From there you can browse entries, add/remove
relationships, open entries for editing etc. Most of the commands available in
=org-brain-visualize= can also be used in =org-mode= directly, in which case
they will operate on the "entry at point". The following keybindings are
available in =org-brain-visualize=:

| Key        | Command                              | Description                                         |
|------------+--------------------------------------+-----------------------------------------------------|
| j or TAB   | =forward-button=                     | Goto next link                                      |
| k or S-TAB | =backward-button=                    | Goto previous link                                  |
| b          | =org-brain-visualize-back=           | Like the back button in a web browser.              |
| h or *     | =org-brain-new-child=                | Add a new child /headline/ to entry                 |
| c          | =org-brain-add-child=                | Add an existing entry, or a new /file/, as a child  |
| C          | =org-brain-remove-child=             | Remove one the entry's child relations              |
| p          | =org-brain-add-parent=               | Add an existing entry, or a new /file/, as a parent |
| P          | =org-brain-remove-parent=            | Remove one of the entry's parent relations          |
| f          | =org-brain-add-friendship=           | Add an existing entry, or a new /file/, as a friend |
| F          | =org-brain-remove-friendship=        | Remove one of the entry's friend relations          |
| n          | =org-brain-pin=                      | Toggle if the entry is pinned or not                |
| t          | =org-brain-set-title=                | Change the title of the entry.                      |
| T          | =org-brain-set-tags=                 | Change the tags of the entry.                       |
| d          | =org-brain-delete-entry=             | Choose an entry to delete.                          |
| l          | =org-brain-visualize-add-resource=   | Add a new resource link in entry                    |
| C-y        | =org-brain-visualize-paste-resource= | Add a new resource link from clipboard              |
| a          | =org-brain-visualize-attach=         | Run =org-attach= on entry (headline entries only)   |
| o          | =org-brain-goto-current=             | Open current entry for editing                      |
| O          | =org-brain-goto=                     | Choose and edit one of your =org-brain= entries     |
| v          | =org-brain-visualize=                | Choose and visualize a different entry              |

You can also edit =org-brain= entries directly from =org-mode=. You can use the
default =org-mode= outline structure to define parent/children relationships,
but keep in mind that only entries with an =ID= property will be considered as
entries to =org-brain=, you can use =M-x org-id-get-create= to create an =ID=
property to the current =org-mode= headline. In order to add external
relationships (for instance to add an entry in a different file as a child) you
may use the commands above, like =M-x org-brain-add-child= for instance.

You may want to create a link to an =org-brain= entry in an =org-mode= file (not
necessarily an =org-brain= file itself). You can use the =brain:= link type for
this, or use =M-x org-brain-insert-link=. Doing this will, if in an =org-brain=
file, treat the linked entry as a child of the current entry, unless
=org-brain-brain-link-adds-child= is =nil=.

If you try to add a child/parent/friend to an entry which doesn't exist, that
entry will be created. The name of a new entry can be written like this:
=file::headline=. The =headline= will be created as a level one headline in
=file=.

Another available command is =M-x org-brain-agenda=, which can be used to run
=org-agenda= on your =org-brain= files.

** Special tags

You might have a headline which you do not really want as an entry in
=org-brain=. The most basic way to exclude such a headline is simply to not add
an =ID= property to it. However, =org-brain= also provide two tags, which you
can use to tag the headline:

- =:nobrain:= :: This tag excludes the headline, and its subheadings, from your
                 =org-brain= entries. You can change the tag name by modifying
                 =org-brain-exclude-tree-tag=.
- =:childless:= :: This tag does not exclude the headline, but it excludes the
                   subheadings. You can change the tag name by modifying
                   =org-brain-exclude-children-tag=.

There might be cases where you do not want to show the text and/or resources of
an entry in =org-brain-visualize-mode=, in this case you can add the following
tags:

- =:notext:= :: Do not show the entry's text in =org-brain-visualize=. You can
                change the tag name by modifying
                =org-brain-exclude-text-tag=.
- =:resourceless:= :: Do not show the entry's resources in
     =org-brain-visualize=. You can change the tag name by modifying
     =org-brain-exclude-resources-tag=.

Please note that tags only are available for headline entries.

** Take note!

=org-brain= creates and uses several headline properties in the =PROPERTIES=
drawer of =org-mode= headlines:

- =BRAIN_PARENTS=
- =BRAIN_CHILDREN=
- =BRAIN_FRIENDS=
- =ID=

These properties are also mirrored as file keywords at the top of file entries,
for instance =#+BRAIN_CHILDREN: 00c0f06c-9bd4-4c31-aed0-15bb3361d9a2=.

These properties/keywords are /not meant to be manipulated directly/! If you
want to remove these properties, use the corresponding command instead
(=org-brain-remove-child= or similar).

You might also see that =org-brain= inserts a =RESOURCES= drawer. It is okay to
modify this drawer manually.

* Other useful packages

There's some missing functionality in =org-brain=, which you may find useful.
However there are other packages which might improve your =org-brain=
experience. Below are some suggestions (feel free to create an issue or send a
pull request if you have more examples), all of them should be available on
MELPA.

** [[https://github.com/noctuid/link-hint.el][link-hint]]

#+BEGIN_QUOTE
link-hint.el is inspired by the link hinting functionality in vim-like browsers
and browser plugins such as pentadactyl. It provides commands for using avy to
open or copy "links."
#+END_QUOTE

After installing =link-hint= you could bind =link-hint-open-link= to a key, and
use it in =org-brain-visualize-mode=. If you only want to use =link-hint= in
=org-brain-visualize-mode=, you could add the following to your init-file:

#+BEGIN_SRC emacs-lisp
  (define-key org-brain-visualize-mode-map (kbd "C-l") #'link-hint-open-link)
#+END_SRC

** [[http://www.gnuvola.org/software/aa2u/][ascii-art-to-unicode]]

#+BEGIN_QUOTE
Converts simple ASCII art line drawings in the region of the current buffer to
Unicode.
#+END_QUOTE

=ascii-art-to-unicode= is useful if you want =org-brain-visualize-mode= to look
a bit nicer. After installing, add the following to your init-file:

#+BEGIN_SRC emacs-lisp
  (defun aa2u-buffer ()
    (aa2u (point-min) (point-max)))

  (add-hook 'org-brain-after-visualize-hook #'aa2u-buffer)
#+END_SRC

** [[http://jblevins.org/projects/deft/][deft]]

#+BEGIN_QUOTE
An Emacs mode for quickly browsing, filtering, and editing directories of plain
text notes, inspired by Notational Velocity.
#+END_QUOTE

After installing =deft=, you can add the function below to your init-file.

#+BEGIN_SRC emacs-lisp
  (defun org-brain-deft ()
    "Use `deft' for files in `org-brain-path'."
    (interactive)
    (let ((deft-directory org-brain-path)
          (deft-recursive t)
          (deft-extensions '("org")))
      (deft)))
#+END_SRC

** [[https://github.com/alphapapa/helm-org-rifle][helm-org-rifle]]

#+BEGIN_QUOTE
It searches both headings and contents of entries in Org buffers, and it
displays entries that match all search terms, whether the terms appear in the
heading, the contents, or both.
#+END_QUOTE

After installing =helm-org-rifle=, you can add the function below to your
init-file.

#+BEGIN_SRC emacs-lisp
  (defun helm-org-rifle-brain ()
    "Rifle files in `org-brain-path'."
    (interactive)
    (helm-org-rifle-directories (list org-brain-path)))
#+END_SRC

** [[https://github.com/scallywag/org-board][org-board]]
#+BEGIN_QUOTE
org-board is a bookmarking and web archival system for Emacs Org mode, building
on ideas from Pinboard. It archives your bookmarks so that you can access them
even when you're not online, or when the site hosting them goes down.
#+END_QUOTE

* Similar packages

The Emacs Wiki has an article about [[https://www.emacswiki.org/emacs/WikiModes][wiki modes in Emacs]].

** [[https://github.com/caiorss/org-wiki][org-wiki]]

#+BEGIN_QUOTE
Org-wiki is a org-mode extension that provides tools to manage and build
personal wiki or desktop wiki where each wiki page is a org-mode file.
#+END_QUOTE

** [[https://github.com/gregdetre/emacs-freex][emacs-freex]]

Emacs freex is a Pymacs/SQLite/Elisp system that implements a transcluding wiki.
Emacs-freex is not compatible at this time with org-mode. Despite this,
emacs-freex is an impressive system for maintaining a wiki. Further, because the
data is stored both in files on disk and in an SQLite database, it opens the
possibility for implementing something like =org-brain='s visualize interface
(ala TheBrain's "plex") by talking with SQLite, via Pymacs, to return the
relationships between nodes. This would consistute a lot of work to implement
but would be very impressive. If someone was to also add LaTeX rendering inside
=emacs-freex= =nuggets= also, those two additional features would make
=emacs-freex= more compelling. As it is, practically speaking, you may think of
=org-brain= as implementing many of the features of =emacs-freex=, but with all
of =org-mode='s goodness included.
