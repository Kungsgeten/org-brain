#+TITLE:org-brain [[http://melpa.org/#/org-brain][file:http://melpa.org/packages/org-brain-badge.svg]]

=org-brain= implements a variant of [[https://en.wikipedia.org/wiki/Concept_map][concept mapping]] in Emacs, using [[http://orgmode.org/][org-mode]]. It
is heavily inspired by a piece of software called [[http://thebrain.com/][The Brain]] (but currently with
a more limited feature set), you can view an introduction to that program [[https://www.youtube.com/watch?v=GFqLUBKCFdA][here]].

You can think of =org-brain= as a combination of a wiki and a mind map, where each
wiki page / mind-map node is an =org-mode= file which resides in your
=org-brain-path= (a directory containing all your =org-brain= files). These files
are called /entries/. Entries can link to other entries, and you can then view the
network of links as a mind map, using =M-x org-brain-visualize=.

#+BEGIN_EXAMPLE
PINNED:  Index


               / Python              Game development / Game design
               / Programming books           |
   Programming / Emacs                       |
         |                                   |
         *-----------------*-----------------*
                           |
                           V
                    Game programming

Game Maker  Unity

-----------------------------------------------

- https://en.wikipedia.org/wiki/Game_programming

/* Gamasutra Articles
   - Passing Through Ghosts in Pac-Man
   - In-House Engine Development: Technical Tips
#+END_EXAMPLE

Above is a visualization of the /game programming/ entry (as can be seen in the
middle). Above the entry title we can see that the entry has two parents (other
entries which link to game programming): /programming/ and /game development/. You
can also see the siblings and which parent they come from: /python/, /programming
books/, /emacs/, and /game design/. Below the entry title we can see the children of
the entry: /Game Maker/ and /Unity/. At the very top you'll find pinned entries
(entries which will be shown independent of the visualized entry).

At the bottom the entry's table of contents (headlines in the buffer) is shown:
/Gamasutra Articles/. You can also see the resources of the entry: the two
Gamasutra articles and the Wikipedia link. Resources can be =org-mode= links in
the entry file, or [[http://orgmode.org/manual/Attachments.html][org attachments]].

The parents, children, siblings, headlines, and resources are all links; they can
be pressed to visualize other entries, visit resources etc.
* Backwards compatability/breaking change: Version 0.5 changes the way child and parent relations, and pins, are stored 
Parent and child relationships are serialized to disk in sexp form. Same with
pinned entries. Their creation and maintenance is managed by =org-brain-visualize=
mode commands. Therefore, the "Brainchildren" headline is no longer used in
org-brain files by =org-brain= and is therefore deprecated as of this release.
Note also that #+BRAIN_PIN: is no longer used either and is also deprecated as
of this release.

Note that =org-brain-link-type= links will continue to work as general links,
similar to a "file:" link in Org, but they are not recognized by =org-brain= as
child or parent relationship links. 

This release's changes simplify the logic of org-brain, greatly increase its
performance, and most importantly, keeps all meta-data needed by org-brain out
of your org brain files (with the exception of #+TITLE: which is a standard
=org-mode= concept.
* Setup and requirements
The easiest way is to get =org-brain= from MELPA. If you do not want to do that or
would like this fork which includes caching and an extended visualize interface,
here are the steps to install it manually:

1. =org-brain= requires Emacs 25, org-mode 9. These need to be part of your Emacs.
2. Clone the repo locally (plug for [[https://github.com/motemen/ghq][ghq]] to manage local repo cloning).
3. Utilize =use-package= to load the repo. (Alternatively, download =org-brain.el=, add it to your load-path, and put =(require 'org-brain)= in your init-file.)
   #+begin_src emacs-lisp 
   (use-package org-brain
     ;; :ensure t ; If you want to use MELPA package.
     :load-path "~/.ghq/github.com/analyticd/org-brain"
     :init
     (setq org-brain-path "/path/to/where/you/want/to/keep/your/org/brain/files/or/just/your/existing/org-directory"))
   #+end_src
4. Configure =org-brain-path= (defaults to =/brain= in your =org-directory=) to a directory where you want to put your =org-brain= files (which could be the location where you already keep your org files if you wish to transform your existing org files into =org-brain= files)
   You can set this with the example config presented above or through the customize interface,
5. If you are an evil user, you'll want to add =(evil-set-initial-state 'org-brain-visualize-mode 'emacs)= to your =org-brain= configuration. Here is the config example above, updated:
   #+begin_src emacs-lisp
   (use-package org-brain
     ;; :ensure t ; If you want to use MELPA package.
     :load-path "~/.ghq/github.com/analyticd/org-brain"
     :init
     (setq org-brain-path "/path/to/where/you/want/to/keep/your/org/brain/files/or/your/existing/org-directory")
     (eval-after-load 'evil
       (evil-set-initial-state 'org-brain-visualize-mode 'emacs))
     :config
     (bind-key [(meta f9)] #'org-brain-visualize)) ; Handy keybinding, use whatever binding you want
   #+end_src
6. If you wish to use the search text across org-brain-files feature, you'll
   need to install the =ag= executable and the =ag= package. E.g., On macOS, you
   can install ag via the brew package manager: =brew install ag=. To install the
   =ag= package: M-x package-install RET ag RET.
* Usage
You interact with =org-brain= via the =M-x org-brain-visualize= interface.

Once in the =org-brain-visualize= interface/mode, via =M-x org-brain-visualize=, you
can type:

1. "o" to open the current entry in your =org-brain= for editing.
2. "c" to create a child for the current entry. You may enter several children at
   once separated by =org-brain-batch-separator=, ";" by default, to
   simultaneously create more than one. For instance pressing =c= and then =guitar;
   mandolin;banjo= would add =guitar=, =mandolin= and =banjo= as children. Currently
   it isn't possible to use completion when batch entering children/parents, so
   it is best used for adding non-existing entries. =org-brain= handles creating
   the bidirectional parent relationship in the child also.
3. "C" to remove a child (link) for the current entry. This does not delete the
   file pointed to by the child (link). You may enter several children at
   once separated by =org-brain-batch-separator=, ";" by default, to
   simultaneously remove more than one. =org-brain= handles removing 
   the bidirectional parent relationship in the child also.
4. "p" to create a parent for the current entry. You may enter several parents at
   once separated by =org-brain-batch-separator=, ";" by default, to
   simultaneously create more than one. =org-brain= handles creating
   the bidirectional child relationship in the parent also.
5. "P" to remove a parent for the current entry. You may enter several parents at
   once separated by =org-brain-batch-separator=, ";" by default, to
   simultaneously remove more than one. =org-brain= handles removing
   the bidirectional child relationship in the parent also.
6. "n" to pin the current entry (if it is already pinned, then =org-brain= will respect that)
7. "N" to remove a pin from the current entry
8. "r" to rename the current entry
   This will only change the filename and entry name, not the =#+TITLE= of
   the entry.
9. "t" to add or change the title of the current entry
   This will create a new title, prompting you for the value. If a
   title, #+TITLE: some-title, already exists then it will be replaced with the
   new title you've provide.
10. "T" to remove a title of the current entry altogether.
11. "s" to do a completing read search of headlines in the current entry and
    jump to selected headline in underlying file.
12. "S" to do a completing read search of links in the current entry and jump to
    selected link in underlying file.
13. "C-c s" to do a text search across all org-brain-files. Uses the ag package
    and ag executable. To install the ag package, do: M-x package-install ag. If
    you are on macOS you can install the executable via: brew install ag.
14. "d" open the =org-brain-path= in dired in the other window. This is useful for
    organizing tasks to get a quick view of all your =org-brain-files=.

Here is the the full list of keybindings:

| j / TAB   | Goto next link                                                                        |
| k / S-TAB | Goto previous link                                                                    |
| c         | Add child(ren) [and handle creating parent relationship of child to entry]            |
| C         | Remove child(ren)  [and handle removing parent relationship of child to entry]        |
| p         | Add parent(s)   [and handle creating child relationship of parent to entry]           |
| P         | Remove parent(s) [and handle removing child relationship of parent to entry]          |
| n         | Add pin                                                                               |
| N         | Remove pin                                                                            |
| t         | Add or change title                                                                   |
| T         | Remove title                                                                          |
| l         | Add resource link                                                                     |
| C-y       | Paste resource link                                                                   |
| a         | Add resource [[http://orgmode.org/manual/Attachments.html][attachment]]                                                               |
| o         | Open and edit the visualized entry                                                    |
| f         | Find/visit another entry to visualize                                                 |
| r         | Rename this, or another, entry                                                        |
| s         | Search for headline in current entry and jump to selected headline in underlying file |
| S         | Search for link in current entry and jump to selected link in underlying file         |
| C-c s     | Search for string across all org-brain-files.                                         |
| d         | Open org-brain-path in dired in other window.                                         |

In order to make a link to another org-brain entries, use an =org-mode= link with
=org-brain-link-type= type, e.g., "brain:" by default. Its easiest to use
=C-c C-l br TAB= and select the "brain:" type, or =M-x org-brain-insert-link=.
=org-brain-link-type= has the advantage that it provides completion on your
=org-brain-files=. Note, however, that as of version 0.5 of =org-brain=,
=org-brain-link-type= links do not play a part in defining child or parent
relationships. They are now simply links, analogous to regular org-mode links to
other resources.

=M-x org-brain-agenda= can be used to run =org-agenda= on your =org-brain= files.

If you add resources via =org-brain-visualize= they will be inserted under
the current heading in the visualize buffer. 
* Other useful packages

There's some missing functionality in =org-brain=, which could be useful. However,
there are many other packages for which might be useful alternatives. Below are
some suggestions (feel free to create an issue or send a pull request if you
have more examples).

** [[http://jblevins.org/projects/deft/][deft]]

#+BEGIN_QUOTE
An Emacs mode for quickly browsing, filtering, and editing directories of plain text notes, inspired by Notational Velocity.
#+END_QUOTE

You can add the function below to your init-file.

#+BEGIN_SRC emacs-lisp
  (defun org-brain-deft ()
    "Use `deft' for files in `org-brain-path'."
    (interactive)
    (let ((deft-directory org-brain-path)
          (deft-recursive t)
          (deft-extensions '("org")))
      (deft)))
#+END_SRC

** [[https://github.com/alphapapa/helm-org-rifle][helm-org-rifle]]

#+BEGIN_QUOTE
It searches both headings and contents of entries in Org buffers, and it displays entries that match all search terms, whether the terms appear in the heading, the contents, or both.
#+END_QUOTE

You can add the function below to your init-file.

#+BEGIN_SRC emacs-lisp
  (defun helm-org-rifle-brain ()
    "Rifle files in `org-brain-path'."
    (interactive)
    (helm-org-rifle-directories (list org-brain-path)))
#+END_SRC

** [[https://github.com/scallywag/org-board][org-board]]
#+BEGIN_QUOTE
org-board is a bookmarking and web archival system for Emacs Org mode, building on ideas from Pinboard. It archives your bookmarks so that you can access them even when you're not online, or when the site hosting them goes down.
#+END_QUOTE
** [[https://github.com/gregdetre/emacs-freex][emacs-freex]]
Emacs freex is a Python/Sqlalchemy/Sqlite/Pymacs/Elisp system that implements a
transcluding wiki. 
